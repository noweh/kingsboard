name: Deploy Laravel Project

on:
  push:
    branches:
      - master # Or the branch you use for production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, curl, zip, gd, bcmath # Add necessary PHP extensions
        tools: composer

    - name: Set working directory to project
      run: cd project

    # Create an empty SQLite database file for CI if needed by composer scripts
    - name: Create dummy database file for CI
      working-directory: ./project
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Install Composer dependencies
      working-directory: ./project
      run: composer install --optimize-autoloader --no-dev --no-interaction --no-progress

    # Install sshpass to enable rsync password authentication
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    # ---- Deployment Section ----

    - name: Deploy using rsync (SSH with Password)
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET_PATH: ${{ secrets.TARGET_DIRECTORY }}/current/
      run: |
        sshpass -e rsync -avz --delete \
        --rsh="ssh -o StrictHostKeyChecking=no -p 22" \
        --exclude=storage \
        --exclude=.env \
        --exclude=.git \
        --exclude=.github \
        ./project/ ${REMOTE_USER}@${REMOTE_HOST}:${TARGET_PATH}

    # Create shared symlinks and necessary directories/permissions
    - name: Create shared symlinks and directories
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        password: ${{ secrets.SSH_PASSWORD }} # Use password authentication
        script: |
          set -e
          TARGET_DIR=${{ secrets.TARGET_DIRECTORY }}
          SHARED_DIR=$TARGET_DIR/shared
          CURRENT_DIR=$TARGET_DIR/current
          
          echo "Creating .env symlink"
          rm -f $CURRENT_DIR/.env
          ln -snf $SHARED_DIR/.env $CURRENT_DIR/.env
          
          echo "Linking storage directory and ensuring structure/permissions"
          rm -rf $CURRENT_DIR/storage
          ln -snf $SHARED_DIR/storage $CURRENT_DIR/storage
          mkdir -p $SHARED_DIR/storage/app/public
          mkdir -p $SHARED_DIR/storage/framework/cache/data
          mkdir -p $SHARED_DIR/storage/framework/sessions
          mkdir -p $SHARED_DIR/storage/framework/views
          mkdir -p $SHARED_DIR/storage/logs
          chmod -R 775 $SHARED_DIR/storage
          
          echo "Ensuring bootstrap/cache permissions"
          mkdir -p $CURRENT_DIR/bootstrap/cache
          chmod -R 775 $CURRENT_DIR/bootstrap/cache

    # Run post-deployment commands
    - name: Run post-deployment commands
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        password: ${{ secrets.SSH_PASSWORD }} # Use password authentication
        script: |
          set -e 
          echo "Running post-deployment commands in target directory: ${{ secrets.TARGET_DIRECTORY }}/current"
          cd ${{ secrets.TARGET_DIRECTORY }}/current
          
          echo "Running migrations..."
          /usr/bin/php8.2-cli artisan migrate --force
          
          echo "Clearing caches..."
          /usr/bin/php8.2-cli artisan optimize:clear
          
          # Uncomment if you use queues
          # echo "Restarting queue worker..."
          # /usr/bin/php8.2-cli artisan queue:restart
          
          echo "Post-deployment commands finished successfully." 